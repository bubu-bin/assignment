generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  password  String
  email     String   @unique
  name      String
  surname   String
  createdAt DateTime @default(now()) @map("created_at")
  form      Form[]

  @@map("users")
}

model ProductCategory {
  id        Int                       @id @default(autoincrement())
  name      ProductCategoryDefinition
  questions Question[]
  form      Form[]
  Product   Product[]

  @@map("product_categories")
}

enum ProductCategoryDefinition {
  CAR_DEAL
  VEHICLE_INSURANCE
}

model Question {
  id                           Int                                  @id @default(autoincrement())
  isInterDependent             Boolean                              @map("is_inter_dependent")
  order                        String
  prompt                       String
  options                      Option[]
  createdAt                    DateTime                             @default(now()) @map("created_at")
  updatedAt                    DateTime                             @updatedAt @map("updated_at")
  name                         String
  placeholder                  String?
  isMulti                      Boolean?                             @map("is_multi")
  textFieldType                String?                              @map("text_field_type")
  productCategory              ProductCategory                      @relation(fields: [productCategoryId], references: [id], onDelete: Restrict)
  productCategoryId            Int                                  @map("product_category_id")
  questionType                 QuestionType                         @relation(fields: [questionTypeId], references: [id], onDelete: Restrict)
  questionTypeId               Int                                  @map("question_type_id")
  inputType                    InputType                            @relation(fields: [inputTypeId], references: [id], onDelete: Restrict)
  inputTypeId                  Int                                  @map("input_type_id")
  selfReferenceLeadingQuestion QuestionsOnInterDependentQuestions[] @relation("LeadingQuestion")
  interDependentQuestions      QuestionsOnInterDependentQuestions[] @relation("InterDependentQuestion")
  formData                     FormData[]
  formType                     FormType                             @relation(fields: [formTypeId], references: [id])
  formTypeId                   Int                                  @map("form_type_id")

  @@map("questions")
}

model QuestionType {
  id        Int                    @id @default(autoincrement())
  name      QuestionTypeDefinition
  questions Question[]

  @@map("question_types")
}

enum QuestionTypeDefinition {
  OPTION
  BOOLEAN
  INPUT
}

model InputType {
  id        Int                 @id @default(autoincrement())
  name      InputTypeDefinition
  questions Question[]

  @@map("input_types")
}

enum InputTypeDefinition {
  CHECKBOX
  RADIO
  TEXT
}

model Option {
  id         Int      @id @default(autoincrement())
  value      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId Int      @map("question_id")

  @@map("options")
}

model QuestionsOnInterDependentQuestions {
  id                       Int                 @id @default(autoincrement())
  leadingQuestion          Question            @relation("LeadingQuestion", fields: [leadingQuestionId], references: [id], onDelete: Cascade)
  leadingQuestionId        Int                 @map("leading_question_id")
  interDependentQuestion   Question            @relation("InterDependentQuestion", fields: [interDependentQuestionId], references: [id], onDelete: Cascade)
  interDependentQuestionId Int                 @map("inter_depedent_question_id")
  inputOutputTrigger       InputOutputTrigger? @relation(fields: [inputOutputTriggerId], references: [id], onDelete: Restrict)
  inputOutputTriggerId     Int                 @unique @map("input_output_trigger_id")

  @@map("inter_dependent_questions")
}

model InputOutputTrigger {
  id                                 Int                                 @id @default(autoincrement())
  questionsOnInterDependentQuestions QuestionsOnInterDependentQuestions?
  inputWhen                          Json                                @map("input_when")
  outputWith                         Json                                @map("output_with")

  @@map("input_output_triggers")
}

model Form {
  id                Int             @id @default(autoincrement())
  userId            Int             @map("user_id")
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  formData          FormData[]
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Restrict)
  productCategoryId Int             @map("product_category_id")
  formType          FormType        @relation(fields: [formTypeId], references: [id])
  formTypeId        Int             @map("form_type_id")

  @@unique([productCategoryId, userId, formTypeId])
  @@map("forms")
}

model FormData {
  id         Int      @id @default(autoincrement())
  formId     Int      @map("form_id")
  form       Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
  answer     Json
  questionId Int      @map("question_id")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Restrict)

  @@map("form_data")
}

model FormType {
  id       Int                @id @default(autoincrement())
  name     FormTypeDefinition
  Form     Form[]
  Question Question[]

  @@map("form_types")
}

model Product {
  id                Int             @id @default(autoincrement())
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Restrict)
  productCategoryId Int             @map("product_category_id")
  name              String
  amount            Float           @db.DoublePrecision
  opinionsCount     Int             @map("opinions_count")

  @@map("products")
}

enum FormTypeDefinition {
  SEARCH
  PURCHASE
}
